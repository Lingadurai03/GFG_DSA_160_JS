// Possible Words From Phone Digits
// Difficulty: MediumAccuracy: 52.79%Submissions: 66K+Points: 4Average Time: 20m
// Given a keypad as shown in the diagram, and an array arr[ ], your task is to list all possible words in any order which can be generated by pressing numbers from array.

// Examples :

// Input: arr[] = [2, 3]
// Output: ad ae af bd be bf cd ce cf
// Explanation: When we press 2, 3 total possible words are 3 x 3 = 9.
// Input: arr[] =[3, 4, 5]
// Output: dgj dgk dgl dhj dhk dhl dij dik dil egj egk egl ehj ehk ehl eij eik eil fgj fgk fgl fhj fhk fhl fij fik fil
// Explanation: When we press 3, 4, 5 total possible words are 3 x 3 x 3 = 27.
// Input: arr[] =[2]
// Output: a b c
// Explanation: When we press 2 total possible words are 3.
// Constraints:
// 1 ≤ arr.size() ≤ 10
// 2 ≤ arr[i] ≤ 9

const phoneNumberValues = {
  1: [''],
  2: ['a', 'b', 'c'],
  3: ['d', 'e', 'f'],
  4: ['g', 'h', 'i'],
  5: ['j', 'k', 'l'],
  6: ['m', 'n', 'o'],
  7: ['p', 'q', 'r', 's'],
  8: ['t', 'u', 'v'],
  9: ['w', 'x', 'y', 'z'],
  0: [''],
};

function solution(arr) {
  let res = [];

  function recursion(idx, str) {
    if (idx == arr.length) {
      res.push(str);
      return;
    }
    for (let i = 0; i < phoneNumberValues[arr[idx]].length; i++) {
      recursion(idx + 1, str + phoneNumberValues[arr[idx]][i]);
    }
  }
  recursion(0, '');

  return res;
}
console.log(solution([0, 1, 2]));
